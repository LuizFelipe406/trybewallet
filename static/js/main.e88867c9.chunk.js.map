{"version":3,"sources":["actions/index.js","pages/Login.js","components/Header.js","components/Form.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["LOGIN_EMAIL","GET_CURRENCY","SAVE_EXPENSE","DELETE_EXPENSE","EDIT_EXPENSE","SAVE_UPDT_EXPENSE","endpoint","Login","state","email","senha","isLogin","handleChange","target","name","value","setState","handleClick","sendEmail","props","this","isValid","test","length","className","src","alt","type","placeholder","onChange","minLength","onClick","disabled","style","backgroundColor","to","React","Component","connect","dispatch","payload","Header","moeda","expenses","reduce","acc","curr","currency","exchangeRates","soma","parseFloat","ask","Math","floor","user","wallet","alimentacao","Form","description","method","tag","editing","getCurrentExpense","idToEdit","currentEdit","find","expense","id","saveExpense","estado","handleClickEdit","updateExpense","editor","currencies","updateButton","addButton","htmlFor","map","i","key","fetch","then","response","json","USDT","expenseObject","saveExpenseAction","updateExpenseAction","Table","handleClickDelete","deleteExpense","editExpense","scope","exp","currencyName","correctValue","toFixed","replace","deleteExpenseAction","editExpenseAction","Wallet","getCurrency","filteredArray","Object","values","filter","codein","code","App","path","component","Boolean","window","location","hostname","match","initialState","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e88867c9.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const LOGIN_EMAIL = 'LOGIN_EMAIL';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const SAVE_UPDT_EXPENSE = 'SAVE_UPDT_EXPENSE';\nconst endpoint = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const sendEmailAction = (payload) => ({ type: LOGIN_EMAIL, payload });\nexport const getCurrencyAction = () => (dispatch) => {\n  fetch(endpoint)\n    .then((response) => response.json())\n    .then((response) => {\n      const currencyArray = Object.values(response);\n      const filteredArray = currencyArray.filter(\n        (currency) => currency.codein !== 'BRLT',\n      ).map((currency) => currency.code);\n      dispatch({ type: GET_CURRENCY, payload: filteredArray });\n    });\n};\n\nexport const saveExpenseAction = (expense) => (dispatch) => {\n  fetch(endpoint)\n    .then((response) => response.json())\n    .then((response) => {\n      delete response.USDT;\n      const expenseObject = {\n        ...expense,\n        exchangeRates: response,\n      };\n      dispatch({ type: SAVE_EXPENSE, payload: expenseObject });\n    });\n};\n\nexport const deleteExpenseAction = (id) => ({ type: DELETE_EXPENSE, payload: id });\n\nexport const editExpenseAction = (id) => ({ type: EDIT_EXPENSE, payload: id });\n\nexport const updateExpenseAction = (expense) => (\n  { type: SAVE_UPDT_EXPENSE, payload: expense });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { sendEmailAction } from '../actions';\nimport '../css/Login.css';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    senha: '',\n    isLogin: false,\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick = () => {\n    const { email } = this.state;\n    const { sendEmail } = this.props;\n    sendEmail(email);\n    this.setState({ isLogin: true });\n  }\n\n  render() {\n    const { email, senha, isLogin } = this.state;\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    const minPasswordLength = 6;\n    const isValid = !((emailRegex.test(email) && senha.length >= minPasswordLength));\n    return (\n      <div className=\"page\">\n        <form className=\"login-form\">\n          <div className=\"login-title\">\n            <h1>\n              TRYBE WALLET\n            </h1>\n            <img src=\"http://trybewallet.surge.sh/static/media/wallet.c40086e0.png\" alt=\"imagem de carteira\" />\n          </div>\n          <input\n            className=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n            data-testid=\"email-input\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <input\n            className=\"input\"\n            type=\"password\"\n            placeholder=\"Senha\"\n            data-testid=\"password-input\"\n            minLength=\"6\"\n            name=\"senha\"\n            value={ senha }\n            onChange={ this.handleChange }\n          />\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={ this.handleClick }\n            disabled={ isValid }\n            style={ { backgroundColor: isValid ? 'grey' : 'cornflowerBlue' } }\n          >\n            Entrar\n          </button>\n        </form>\n        { isLogin && <Redirect to=\"/carteira\" />}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendEmail: (email) => dispatch(sendEmailAction(email)),\n});\n\nLogin.propTypes = {\n  sendEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../css/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { email, moeda, expenses } = this.props;\n    return (\n      <div className=\"header-main\">\n        <div className=\"header-title\">\n          <img src=\"http://trybewallet.surge.sh/static/media/wallet.c40086e0.png\" alt=\"imagem de carteira\" />\n          <div className=\"title\">\n            <h1>TR</h1>\n            <h1 className=\"title-green\">Y</h1>\n            <h1>BE WALLET</h1>\n          </div>\n        </div>\n        <div className=\"info-container\">\n          <div className=\"user-info\">\n            <span className=\"material-symbols-outlined icon\">\n              account_circle\n            </span>\n            <span data-testid=\"email-field\">{ email }</span>\n          </div>\n          <div className=\"wallet-info\">\n            <span className=\"material-symbols-outlined icon\">\n              monetization_on\n            </span>\n            <span className=\"wallet-span\">R$:</span>\n            <span className=\"wallet-span\" data-testid=\"total-field\">\n              {\n                expenses.reduce((acc, curr) => {\n                  const { value, currency, exchangeRates } = curr;\n                  const preco = parseFloat(value);\n                  const cambio = parseFloat(exchangeRates[currency].ask);\n                  const soma = preco * cambio;\n                  const correct = Math.floor(soma * 100) / 100;\n                  return acc + correct;\n                }, 0)\n              }\n            </span>\n            <span\n              className=\"wallet-span\"\n              data-testid=\"header-currency-field\"\n            >\n              { moeda }\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  moeda: 'BRL',\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  moeda: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveExpenseAction, updateExpenseAction } from '../actions';\nimport '../css/Form.css';\n\nconst alimentacao = 'Alimentação';\n\nclass Form extends React.Component {\n  state ={\n    description: '',\n    value: '',\n    currency: 'USD',\n    method: 'Dinheiro',\n    tag: alimentacao,\n    editing: true,\n  };\n\n  componentDidUpdate() {\n    const { editor } = this.props;\n    const { editing } = this.state;\n    if (editor && editing) {\n      this.getCurrentExpense();\n    }\n  }\n\n  getCurrentExpense = () => {\n    const { expenses, idToEdit } = this.props;\n    const currentEdit = expenses.find((expense) => expense.id === idToEdit);\n    this.setState({ ...currentEdit, editing: false });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleClick =() => {\n    const { saveExpense } = this.props;\n    const estado = this.state;\n    delete estado.editing;\n    saveExpense(estado);\n    this.setState({\n      description: '',\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: alimentacao,\n    });\n  }\n\n  handleClickEdit = () => {\n    const { updateExpense } = this.props;\n    const estado = this.state;\n    delete estado.editing;\n    updateExpense(estado);\n    this.setState({\n      description: '',\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: alimentacao,\n    });\n  }\n\n  render() {\n    const { currencies, editor } = this.props;\n    const { description, value, currency, method, tag } = this.state;\n    const updateButton = (\n      <button\n        type=\"button\"\n        onClick={ this.handleClickEdit }\n        className=\"btn-expenses\"\n      >\n        Editar despesa\n      </button>\n    );\n    const addButton = (\n      <button\n        type=\"button\"\n        onClick={ this.handleClick }\n        className=\"btn-expenses\"\n      >\n        Adicionar despesa\n      </button>\n    );\n    const addForm = (\n      <form className=\"form-expenses\">\n        <label htmlFor=\"description-input\">\n          Descrição:\n          <input\n            className=\"expenses-input\"\n            name=\"description\"\n            value={ description }\n            id=\"description-input\"\n            type=\"text\"\n            data-testid=\"description-input\"\n            onChange={ this.handleChange }\n            placeholder=\"Ex: McDonald's\"\n          />\n        </label>\n        <label htmlFor=\"value-input\">\n          Valor:\n          <input\n            className=\"expenses-input\"\n            name=\"value\"\n            value={ value }\n            id=\"value-input\"\n            type=\"text\"\n            data-testid=\"value-input\"\n            onChange={ this.handleChange }\n            placeholder=\"R$ 0,00\"\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda:\n          <select\n            className=\"expenses-select\"\n            id=\"currency\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {\n              currencies.map((curr, i) => (\n                <option key={ i } value={ curr }>{ curr }</option>\n              ))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Método de Pagamento:\n          <select\n            className=\"expenses-select payment\"\n            name=\"method\"\n            id=\"method\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria:\n          <select\n            className=\"expenses-select\"\n            name=\"tag\"\n            id=\"tag\"\n            data-testid=\"tag-input\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value={ alimentacao }>{ alimentacao }</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        {\n          editor ? updateButton : addButton\n        }\n      </form>);\n    return addForm;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  editor: state.wallet.editor,\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expense) => dispatch(saveExpenseAction(expense)),\n  updateExpense: (expense) => dispatch(updateExpenseAction(expense)),\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  saveExpense: PropTypes.func.isRequired,\n  editor: PropTypes.bool.isRequired,\n  idToEdit: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpenseAction, editExpenseAction } from '../actions';\nimport '../css/Table.css';\n\nclass Table extends React.Component {\n  handleClickDelete = (id) => {\n    const { deleteExpense } = this.props;\n    deleteExpense(id);\n  }\n\n  handleClickEdit = (id) => {\n    const { editExpense } = this.props;\n    editExpense(id);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th scope=\"col\">Descrição</th>\n            <th scope=\"col\">Valor</th>\n            <th scope=\"col\">Moeda</th>\n            <th scope=\"col\">Câmbio utilizado</th>\n            <th scope=\"col\">Valor convertido</th>\n            <th scope=\"col\">Moeda de conversão</th>\n            <th scope=\"col\">Método de pagamento</th>\n            <th scope=\"col\">Tag</th>\n            <th scope=\"col\">Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.map((exp) => {\n              const {\n                id, description, value, currency, exchangeRates, method, tag } = exp;\n              const currencyName = exchangeRates[currency].name;\n              const soma = parseFloat(value) * parseFloat(exchangeRates[currency].ask);\n              const correctValue = Math.floor(soma * 100) / 100;\n              return (\n                <tr key={ id }>\n                  <td>{ description }</td>\n                  <td>{ parseFloat(value).toFixed(2) }</td>\n                  <td>{ currencyName.replace('/Real Brasileiro', '') }</td>\n                  <td>{ parseFloat(exchangeRates[currency].ask).toFixed(2) }</td>\n                  <td>{ correctValue }</td>\n                  <td>Real</td>\n                  <td>{ method }</td>\n                  <td>{ tag }</td>\n                  <td>\n                    <button\n                      className=\"btn-edit\"\n                      data-testid=\"edit-btn\"\n                      type=\"button\"\n                      onClick={ () => this.handleClickEdit(id) }\n                    >\n                      Editar\n                    </button>\n                    <button\n                      className=\"btn-delete\"\n                      data-testid=\"delete-btn\"\n                      type=\"button\"\n                      onClick={ () => this.handleClickDelete(id) }\n                    >\n                      Excluir\n                    </button>\n\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(deleteExpenseAction(id)),\n  editExpense: (id) => dispatch(editExpenseAction(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Form from '../components/Form';\nimport Table from '../components/Table';\nimport { getCurrencyAction } from '../actions';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { getCurrency } = this.props;\n    getCurrency();\n  }\n\n  render() {\n    return (\n      <main>\n        <Header />\n        <Form />\n        <Table />\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrency: () => dispatch(getCurrencyAction()),\n});\n\nWallet.propTypes = {\n  getCurrency: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN_EMAIL } from '../actions';\n\nconst initialState = {\n  email: '',\n};\n\nconst user = (state = initialState, action) => {\n  switch (action.type) {\n  case LOGIN_EMAIL:\n    return ({\n      email: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  GET_CURRENCY,\n  SAVE_EXPENSE,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  SAVE_UPDT_EXPENSE } from '../actions';\n\nconst initialState = {\n  currencies: [], // array de string\n  expenses: [], // array de objetos, com cada objeto tendo as chaves id, value, currency, method, tag, description e exchangeRates\n  editor: false, // valor booleano que indica de uma despesa está sendo editada\n  idToEdit: 0, // valor numérico que armazena o id da despesa que esta sendo editada\n};\n\nconst wallet = (state = initialState, action) => {\n  switch (action.type) {\n  case GET_CURRENCY:\n    return ({\n      ...state,\n      currencies: [...action.payload],\n    });\n  case SAVE_EXPENSE:\n    return ({\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          id: state.expenses.length,\n          ...action.payload,\n        },\n      ],\n      editor: false,\n    });\n  case DELETE_EXPENSE:\n    return ({\n      ...state,\n      expenses: state.expenses.filter((exp) => exp.id !== action.payload),\n    });\n  case EDIT_EXPENSE:\n    return ({\n      ...state,\n      editor: true,\n      idToEdit: action.payload,\n    });\n  case SAVE_UPDT_EXPENSE:\n    return ({\n      ...state,\n      editor: false,\n      idToEdit: 0,\n      expenses: state.expenses.map(\n        (exp) => (exp.id === state.idToEdit ? {\n          id: state.idToEdit, ...action.payload, exchangeRates: exp.exchangeRates }\n          : exp),\n      ),\n    });\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}